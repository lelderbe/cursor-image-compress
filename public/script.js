// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let selectedFiles = [];
let compressionResults = [];

// DOM —ç–ª–µ–º–µ–Ω—Ç—ã
const uploadArea = document.getElementById('uploadArea');
const fileInput = document.getElementById('fileInput');
const selectFilesBtn = document.getElementById('selectFilesBtn');
const compressBtn = document.getElementById('compressBtn');
const clearAllBtn = document.getElementById('clearAllBtn');
const previewSection = document.getElementById('previewSection');
const filePreviewContainer = document.getElementById('filePreviewContainer');
const progressSection = document.getElementById('progressSection');
const progressFill = document.getElementById('progressFill');
const progressText = document.getElementById('progressText');
const resultsSection = document.getElementById('resultsSection');
const resultsContainer = document.getElementById('resultsContainer');
const downloadAllBtn = document.getElementById('downloadAllBtn');
const statsSection = document.getElementById('statsSection');
const totalFiles = document.getElementById('totalFiles');
const totalSaved = document.getElementById('totalSaved');
const averageCompression = document.getElementById('averageCompression');
const notificationsContainer = document.getElementById('notifications');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    initializeEventListeners();
    console.log('üöÄ ImageCompress Pro –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function initializeEventListeners() {
    // Drag & Drop —Å–æ–±—ã—Ç–∏—è
    uploadArea.addEventListener('dragenter', handleDragEnter);
    uploadArea.addEventListener('dragover', handleDragOver);
    uploadArea.addEventListener('dragleave', handleDragLeave);
    uploadArea.addEventListener('drop', handleDrop);
    
    // –ö–ª–∏–∫ –ø–æ –æ–±–ª–∞—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∫–∏
    uploadArea.addEventListener('click', () => fileInput.click());
    
    // –í—ã–±–æ—Ä —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ input
    fileInput.addEventListener('change', handleFileSelect);
    
    // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    selectFilesBtn.addEventListener('click', () => fileInput.click());
    compressBtn.addEventListener('click', handleCompress);
    clearAllBtn.addEventListener('click', handleClearAll);
    downloadAllBtn.addEventListener('click', handleDownloadAll);
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Drag & Drop
function handleDragEnter(e) {
    e.preventDefault();
    uploadArea.classList.add('drag-over');
}

function handleDragOver(e) {
    e.preventDefault();
    uploadArea.classList.add('drag-over');
}

function handleDragLeave(e) {
    e.preventDefault();
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø–æ–∫–∏–Ω—É–ª–∏ –æ–±–ª–∞—Å—Ç—å
    if (!uploadArea.contains(e.relatedTarget)) {
        uploadArea.classList.remove('drag-over');
    }
}

function handleDrop(e) {
    e.preventDefault();
    uploadArea.classList.remove('drag-over');
    
    const files = Array.from(e.dataTransfer.files);
    processFiles(files);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤
function handleFileSelect(e) {
    const files = Array.from(e.target.files);
    processFiles(files);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤
function processFiles(files) {
    const validFiles = files.filter(file => {
        const isValid = (file.type === 'image/jpeg' || file.type === 'image/png') && 
                       file.size <= 10 * 1024 * 1024; // 10MB
        
        if (!isValid) {
            if (file.type !== 'image/jpeg' && file.type !== 'image/png') {
                showNotification(`–§–∞–π–ª "${file.name}" –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –¢–æ–ª—å–∫–æ JPG –∏ PNG.`, 'error');
            } else if (file.size > 10 * 1024 * 1024) {
                showNotification(`–§–∞–π–ª "${file.name}" —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º—É–º 10MB.`, 'error');
            }
        }
        
        return isValid;
    });

    if (validFiles.length === 0) {
        showNotification('–ù–µ –≤—ã–±—Ä–∞–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ñ–∞–π–ª–æ–≤', 'error');
        return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤
    if (selectedFiles.length + validFiles.length > 10) {
        const allowedCount = 10 - selectedFiles.length;
        validFiles.splice(allowedCount);
        showNotification(`–ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–∞–∫—Å–∏–º—É–º 10 —Ñ–∞–π–ª–æ–≤. –î–æ–±–∞–≤–ª–µ–Ω–æ ${allowedCount} —Ñ–∞–π–ª–æ–≤.`, 'info');
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –∫ —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–º
    selectedFiles.push(...validFiles);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    updatePreview();
    updateButtons();
    
    showNotification(`–î–æ–±–∞–≤–ª–µ–Ω–æ ${validFiles.length} —Ñ–∞–π–ª–æ–≤`, 'success');
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
function updatePreview() {
    filePreviewContainer.innerHTML = '';
    
    if (selectedFiles.length === 0) {
        previewSection.style.display = 'none';
        return;
    }
    
    previewSection.style.display = 'block';
    
    selectedFiles.forEach((file, index) => {
        const filePreview = document.createElement('div');
        filePreview.className = 'file-preview';
        
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–≤—å—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const img = document.createElement('img');
        img.src = URL.createObjectURL(file);
        img.alt = file.name;
        img.onload = () => URL.revokeObjectURL(img.src); // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–∞–º—è—Ç—å
        
        const fileInfo = document.createElement('div');
        fileInfo.className = 'file-info';
        
        const fileName = document.createElement('div');
        fileName.className = 'file-name';
        fileName.textContent = file.name.length > 20 ? 
            file.name.substring(0, 20) + '...' : file.name;
        fileName.title = file.name;
        
        const fileSize = document.createElement('div');
        fileSize.className = 'file-size';
        fileSize.textContent = formatFileSize(file.size);
        
        // –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
        const removeBtn = document.createElement('button');
        removeBtn.innerHTML = '<i class="fas fa-times"></i>';
        removeBtn.className = 'btn btn-secondary btn-small';
        removeBtn.style.marginTop = '0.5rem';
        removeBtn.onclick = (e) => {
            e.stopPropagation();
            removeFile(index);
        };
        
        fileInfo.appendChild(fileName);
        fileInfo.appendChild(fileSize);
        
        filePreview.appendChild(img);
        filePreview.appendChild(fileInfo);
        filePreview.appendChild(removeBtn);
        
        filePreviewContainer.appendChild(filePreview);
    });
}

// –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
function removeFile(index) {
    selectedFiles.splice(index, 1);
    updatePreview();
    updateButtons();
    
    if (selectedFiles.length === 0) {
        showNotification('–í—Å–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã', 'info');
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–æ–∫
function updateButtons() {
    const hasFiles = selectedFiles.length > 0;
    compressBtn.disabled = !hasFiles;
    clearAllBtn.disabled = !hasFiles;
}

// –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
function handleClearAll() {
    selectedFiles = [];
    compressionResults = [];
    updatePreview();
    updateButtons();
    hideAllSections();
    showNotification('–í—Å–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã', 'info');
}

// –°–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö —Å–µ–∫—Ü–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
function hideAllSections() {
    progressSection.style.display = 'none';
    resultsSection.style.display = 'none';
    statsSection.style.display = 'none';
}

// –°–∂–∞—Ç–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
async function handleCompress() {
    if (selectedFiles.length === 0) {
        showNotification('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª—ã –¥–ª—è —Å–∂–∞—Ç–∏—è', 'error');
        return;
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    showProgress();
    
    try {
        // –°–æ–∑–¥–∞–µ–º FormData
        const formData = new FormData();
        selectedFiles.forEach(file => {
            formData.append('images', file);
        });

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        const response = await fetch('/api/compress', {
            method: 'POST',
            body: formData
        });

        if (!response.ok) {
            throw new Error(`–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.status}`);
        }

        const result = await response.json();
        
        if (result.success) {
            compressionResults = result.results;
            displayResults();
            updateStats();
            showNotification(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${result.results.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`, 'success');
        } else {
            throw new Error(result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
        }

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∂–∞—Ç–∏–∏:', error);
        showNotification(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∂–∞—Ç–∏–∏: ${error.message}`, 'error');
        hideProgress();
    }
}

// –ü–æ–∫–∞–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
function showProgress() {
    progressSection.style.display = 'block';
    resultsSection.style.display = 'none';
    statsSection.style.display = 'none';
    
    // –ê–Ω–∏–º–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
    progressFill.style.width = '0%';
    progressText.textContent = '–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤...';
    
    let progress = 0;
    const interval = setInterval(() => {
        progress += Math.random() * 15;
        if (progress > 90) progress = 90;
        
        progressFill.style.width = progress + '%';
        
        if (progress < 30) {
            progressText.textContent = '–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤...';
        } else if (progress < 60) {
            progressText.textContent = '–°–∂–∞—Ç–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...';
        } else {
            progressText.textContent = '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏...';
        }
    }, 100);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    progressSection.dataset.interval = interval;
}

// –°–∫—Ä—ã—Ç–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
function hideProgress() {
    const interval = progressSection.dataset.interval;
    if (interval) {
        clearInterval(interval);
    }
    progressSection.style.display = 'none';
}

// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
function completeProgress() {
    const interval = progressSection.dataset.interval;
    if (interval) {
        clearInterval(interval);
    }
    
    progressFill.style.width = '100%';
    progressText.textContent = '–ì–æ—Ç–æ–≤–æ!';
    
    setTimeout(() => {
        hideProgress();
    }, 1000);
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
function displayResults() {
    completeProgress();
    
    resultsSection.style.display = 'block';
    statsSection.style.display = 'block';
    
    resultsContainer.innerHTML = '';
    
    compressionResults.forEach((result, index) => {
        const resultItem = document.createElement('div');
        resultItem.className = 'result-item';
        
        const resultInfo = document.createElement('div');
        resultInfo.className = 'result-info';
        
        const title = document.createElement('h4');
        title.textContent = result.originalName;
        
        const stats = document.createElement('div');
        stats.className = 'result-stats';
        
        const originalSize = document.createElement('span');
        originalSize.textContent = `–ò—Å—Ö–æ–¥–Ω—ã–π: ${formatFileSize(result.originalSize)}`;
        
        const compressedSize = document.createElement('span');
        compressedSize.textContent = `–°–∂–∞—Ç—ã–π: ${formatFileSize(result.compressedSize)}`;
        
        const compressionRatio = document.createElement('span');
        compressionRatio.className = 'compression-ratio';
        compressionRatio.textContent = `–°–∂–∞—Ç–æ: ${result.compressionRatio}%`;
        
        stats.appendChild(originalSize);
        stats.appendChild(compressedSize);
        stats.appendChild(compressionRatio);
        
        resultInfo.appendChild(title);
        resultInfo.appendChild(stats);
        
        // –î–µ–π—Å—Ç–≤–∏—è
        const resultActions = document.createElement('div');
        resultActions.className = 'result-actions';
        
        const downloadBtn = document.createElement('button');
        downloadBtn.className = 'btn btn-primary btn-small';
        downloadBtn.innerHTML = '<i class="fas fa-download"></i> –°–∫–∞—á–∞—Ç—å';
        downloadBtn.onclick = () => downloadFile(result);
        
        resultActions.appendChild(downloadBtn);
        
        resultItem.appendChild(resultInfo);
        resultItem.appendChild(resultActions);
        
        resultsContainer.appendChild(resultItem);
    });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function updateStats() {
    const totalFilesCount = compressionResults.length;
    const totalSavedBytes = compressionResults.reduce((sum, result) => 
        sum + (result.originalSize - result.compressedSize), 0);
    const avgCompression = compressionResults.reduce((sum, result) => 
        sum + parseFloat(result.compressionRatio), 0) / totalFilesCount;

    totalFiles.textContent = totalFilesCount;
    totalSaved.textContent = formatFileSize(totalSavedBytes);
    averageCompression.textContent = avgCompression.toFixed(1) + '%';
}

// –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
async function downloadFile(result) {
    try {
        const filename = result.downloadUrl.split('/').pop();
        const response = await fetch(`/api/download/${filename}`);
        
        if (!response.ok) {
            throw new Error('–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
        
        const blob = await response.blob();
        const url = window.URL.createObjectURL(blob);
        
        const a = document.createElement('a');
        a.href = url;
        a.download = result.originalName;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        window.URL.revokeObjectURL(url);
        
        showNotification(`–§–∞–π–ª "${result.originalName}" —Å–∫–∞—á–∞–Ω`, 'success');
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏:', error);
        showNotification(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏: ${error.message}`, 'error');
    }
}

// –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
async function handleDownloadAll() {
    if (compressionResults.length === 0) {
        showNotification('–ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è', 'error');
        return;
    }

    showNotification('–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤...', 'info');

    for (const result of compressionResults) {
        try {
            await downloadFile(result);
            // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è–º–∏
            await new Promise(resolve => setTimeout(resolve, 500));
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞:', error);
        }
    }

    showNotification('–í—Å–µ —Ñ–∞–π–ª—ã —Å–∫–∞—á–∞–Ω—ã!', 'success');
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
function formatFileSize(bytes) {
    if (bytes === 0) return '0 –ë';
    
    const k = 1024;
    const sizes = ['–ë', '–ö–ë', '–ú–ë', '–ì–ë'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

// –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function showNotification(message, type = 'info') {
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.textContent = message;
    
    notificationsContainer.appendChild(notification);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
        if (notification.parentNode) {
            notification.remove();
        }
    }, 5000);
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    const notifications = notificationsContainer.children;
    if (notifications.length > 5) {
        notifications[0].remove();
    }
}

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è UX
document.addEventListener('paste', (e) => {
    const items = e.clipboardData.items;
    const files = [];
    
    for (let item of items) {
        if (item.type.indexOf('image') !== -1) {
            const file = item.getAsFile();
            if (file) files.push(file);
        }
    }
    
    if (files.length > 0) {
        e.preventDefault();
        processFiles(files);
        showNotification(`–í—Å—Ç–∞–≤–ª–µ–Ω–æ ${files.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞`, 'info');
    }
});

// –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø—Ä–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
document.addEventListener('dragover', (e) => {
    e.preventDefault();
});

document.addEventListener('drop', (e) => {
    if (!uploadArea.contains(e.target)) {
        e.preventDefault();
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≥–ª–æ–±–∞–ª—å–Ω–æ
window.addEventListener('error', (e) => {
    console.error('–ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', e.error);
    showNotification('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏', 'error');
});

window.addEventListener('unhandledrejection', (e) => {
    console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞:', e.reason);
    showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞', 'error');
});

console.log('‚úÖ –í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');