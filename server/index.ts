import express from "express";
import multer from "multer";
import sharp from "sharp";
import cors from "cors";
import path from "path";
import { fileURLToPath } from "url";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const app = express();
const PORT = process.env.PORT || 3001;

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.use(
    cors({
        origin: "http://localhost:5173",
        credentials: true,
    })
);

app.use(express.json());

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ multer –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–º—è—Ç—å
const upload = multer({
    storage: multer.memoryStorage(),
    limits: {
        fileSize: 50 * 1024 * 1024, // 50MB –º–∞–∫—Å–∏–º—É–º
    },
    fileFilter: (req, file, cb) => {
        if (file.mimetype === "image/jpeg" || file.mimetype === "image/png") {
            cb(null, true);
        } else {
            cb(new Error("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ JPG –∏ PNG —Ñ–æ—Ä–º–∞—Ç—ã"));
        }
    },
});

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–∂–∞—Ç–∏—è
interface CompressionResult {
    originalName: string;
    originalSize: number;
    compressedSize: number;
    compressionRatio: number;
    compressedBuffer: Buffer;
    mimeType: string;
}

// –§—É–Ω–∫—Ü–∏—è —Å–∂–∞—Ç–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
async function compressImage(buffer: Buffer, mimeType: string, originalName: string): Promise<CompressionResult> {
    let sharpInstance = sharp(buffer);

    // –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const metadata = await sharpInstance.metadata();

    let compressedBuffer: Buffer;

    if (mimeType === "image/jpeg") {
        // –î–ª—è JPEG –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ —Å–∂–∞—Ç–∏–µ
        compressedBuffer = await sharpInstance
            .jpeg({
                quality: 75, // –°–Ω–∏–∂–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –¥–ª—è –ª—É—á—à–µ–≥–æ —Å–∂–∞—Ç–∏—è
                progressive: true, // –ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
                mozjpeg: true, // –ò—Å–ø–æ–ª—å–∑—É–µ–º mozjpeg –¥–ª—è –ª—É—á—à–µ–≥–æ —Å–∂–∞—Ç–∏—è
            })
            .toBuffer();
    } else if (mimeType === "image/png") {
        // –î–ª—è PNG –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –ø–∞–ª–∏—Ç—Ä—ã –∏ —Å–∂–∞—Ç–∏–µ
        compressedBuffer = await sharpInstance
            .png({
                quality: 80, // –ö–∞—á–µ—Å—Ç–≤–æ –¥–ª—è PNG
                compressionLevel: 9, // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Å–∂–∞—Ç–∏–µ
                progressive: true,
                palette: true, // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞–ª–∏—Ç—Ä—ã –¥–ª—è –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
            })
            .toBuffer();
    } else {
        throw new Error("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è");
    }

    const originalSize = buffer.length;
    const compressedSize = compressedBuffer.length;
    const compressionRatio = ((originalSize - compressedSize) / originalSize) * 100;

    return {
        originalName,
        originalSize,
        compressedSize,
        compressionRatio,
        compressedBuffer,
        mimeType,
    };
}

// API endpoint –¥–ª—è —Å–∂–∞—Ç–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
app.post("/api/compress", upload.array("images"), async (req, res) => {
    try {
        const files = req.files as Express.Multer.File[];

        if (!files || files.length === 0) {
            return res.status(400).json({ error: "–§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã" });
        }

        const results: CompressionResult[] = [];

        for (const file of files) {
            try {
                const result = await compressImage(file.buffer, file.mimetype, file.originalname);
                results.push(result);
            } catch (error) {
                console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ ${file.originalname}:`, error);
                // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–æ–≤
            }
        }

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–∞–∫ JSON —Å base64 –¥–∞–Ω–Ω—ã–º–∏
        const response = results.map((result) => ({
            originalName: result.originalName,
            originalSize: result.originalSize,
            compressedSize: result.compressedSize,
            compressionRatio: Number(result.compressionRatio.toFixed(1)),
            compressedData: result.compressedBuffer.toString("base64"),
            mimeType: result.mimeType,
        }));

        res.json({ results: response });
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∂–∞—Ç–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:", error);
        res.status(500).json({ error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞
app.get("/api/health", (req, res) => {
    res.json({ status: "OK", message: "–°–µ—Ä–≤–µ—Ä —Å–∂–∞—Ç–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç" });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üì∑ API –¥–ª—è —Å–∂–∞—Ç–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: http://localhost:${PORT}/api/compress`);
});

export default app;
