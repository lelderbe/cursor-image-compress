const express = require('express');
const multer = require('multer');
const path = require('path');
const fs = require('fs-extra');
const cors = require('cors');
const sharp = require('sharp');
const imagemin = require('imagemin');
const imageminMozjpeg = require('imagemin-mozjpeg');
const imageminPngquant = require('imagemin-pngquant');

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.static('public'));
app.use('/compressed', express.static('compressed'));

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ multer –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
const storage = multer.diskStorage({
    destination: (req, file, cb) => {
        cb(null, 'uploads/');
    },
    filename: (req, file, cb) => {
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
        const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
        cb(null, `${uniqueSuffix}-${file.originalname}`);
    }
});

const upload = multer({
    storage: storage,
    fileFilter: (req, file, cb) => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —è–≤–ª—è–µ—Ç—Å—è JPG –∏–ª–∏ PNG –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        if (file.mimetype === 'image/jpeg' || file.mimetype === 'image/png') {
            cb(null, true);
        } else {
            cb(new Error('–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ JPG –∏ PNG —Ñ–∞–π–ª—ã!'), false);
        }
    },
    limits: {
        fileSize: 10 * 1024 * 1024 // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ 10MB
    }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∂–∞—Ç–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–µ–∑ –ø–æ—Ç–µ—Ä–∏ –∫–∞—á–µ—Å—Ç–≤–∞
async function compressImage(inputPath, outputPath, originalname) {
    try {
        const ext = path.extname(originalname).toLowerCase();
        
        if (ext === '.jpg' || ext === '.jpeg') {
            // –°–∂–∞—Ç–∏–µ JPG —Å –ø–æ–º–æ—â—å—é mozjpeg
            await imagemin([inputPath], {
                destination: path.dirname(outputPath),
                plugins: [
                    imageminMozjpeg({
                        quality: 85, // –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
                        progressive: true
                    })
                ]
            });
            
            // –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Ñ–∞–π–ª –≤ –Ω—É–∂–Ω–æ–µ –∏–º—è
            const compressedFiles = await fs.readdir(path.dirname(outputPath));
            const compressedFile = compressedFiles.find(file => file.includes(path.basename(inputPath, path.extname(inputPath))));
            if (compressedFile) {
                await fs.move(path.join(path.dirname(outputPath), compressedFile), outputPath);
            }
        } else if (ext === '.png') {
            // –°–∂–∞—Ç–∏–µ PNG —Å –ø–æ–º–æ—â—å—é pngquant
            await imagemin([inputPath], {
                destination: path.dirname(outputPath),
                plugins: [
                    imageminPngquant({
                        quality: [0.8, 1.0] // –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –¥–ª—è PNG
                    })
                ]
            });
            
            // –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Ñ–∞–π–ª –≤ –Ω—É–∂–Ω–æ–µ –∏–º—è  
            const compressedFiles = await fs.readdir(path.dirname(outputPath));
            const compressedFile = compressedFiles.find(file => file.includes(path.basename(inputPath, path.extname(inputPath))));
            if (compressedFile) {
                await fs.move(path.join(path.dirname(outputPath), compressedFile), outputPath);
            }
        }
        
        return true;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∂–∞—Ç–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
        // –ï—Å–ª–∏ —Å–∂–∞—Ç–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ –∫–æ–ø–∏—Ä—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
        await fs.copy(inputPath, outputPath);
        return false;
    }
}

// API endpoint –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ —Å–∂–∞—Ç–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
app.post('/api/compress', upload.array('images', 10), async (req, res) => {
    try {
        if (!req.files || req.files.length === 0) {
            return res.status(400).json({ error: '–ù–µ –≤—ã–±—Ä–∞–Ω—ã —Ñ–∞–π–ª—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏' });
        }

        const results = [];

        for (const file of req.files) {
            const originalSize = file.size;
            const compressedFilename = `compressed-${file.filename}`;
            const compressedPath = path.join('compressed', compressedFilename);

            // –°–∂–∏–º–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            const compressionSuccess = await compressImage(file.path, compressedPath, file.originalname);
            
            // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Å–∂–∞—Ç–æ–≥–æ —Ñ–∞–π–ª–∞
            const compressedStats = await fs.stat(compressedPath);
            const compressedSize = compressedStats.size;
            
            // –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç —Å–∂–∞—Ç–∏—è
            const compressionRatio = ((originalSize - compressedSize) / originalSize * 100).toFixed(1);

            results.push({
                id: path.parse(file.filename).name,
                originalName: file.originalname,
                originalSize: originalSize,
                compressedSize: compressedSize,
                compressionRatio: compressionRatio,
                downloadUrl: `/compressed/${compressedFilename}`,
                success: compressionSuccess
            });

            // –£–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            await fs.remove(file.path);
        }

        res.json({
            success: true,
            message: `–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${results.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`,
            results: results
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–æ–≤:', error);
        res.status(500).json({
            error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–æ–≤',
            details: error.message
        });
    }
});

// API endpoint –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å–∂–∞—Ç–æ–≥–æ —Ñ–∞–π–ª–∞
app.get('/api/download/:filename', (req, res) => {
    const filename = req.params.filename;
    const filePath = path.join(__dirname, 'compressed', filename);
    
    if (fs.existsSync(filePath)) {
        res.download(filePath, (err) => {
            if (err) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞:', err);
                res.status(404).json({ error: '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω' });
            }
        });
    } else {
        res.status(404).json({ error: '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
});

// API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ
app.get('/api/info/:filename', async (req, res) => {
    try {
        const filename = req.params.filename;
        const filePath = path.join(__dirname, 'compressed', filename);
        
        if (!fs.existsSync(filePath)) {
            return res.status(404).json({ error: '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        const stats = await fs.stat(filePath);
        res.json({
            filename: filename,
            size: stats.size,
            created: stats.birthtime
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ' });
    }
});

// –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`);
    console.log('üìÅ –ü–∞–ø–∫–∏ –¥–ª—è —Ñ–∞–π–ª–æ–≤ —Å–æ–∑–¥–∞–Ω—ã:');
    console.log('   - uploads/ - –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã');
    console.log('   - compressed/ - —Å–∂–∞—Ç—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
    console.log('   - public/ - —Å—Ç–∞—Ç–∏—á–Ω—ã–µ —Ñ–∞–π–ª—ã —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞');
});

// Graceful shutdown
process.on('SIGTERM', () => {
    console.log('–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –∑–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É —Å–µ—Ä–≤–µ—Ä–∞...');
    process.exit(0);
});

process.on('SIGINT', () => {
    console.log('\n–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT (Ctrl+C), –∑–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É —Å–µ—Ä–≤–µ—Ä–∞...');
    process.exit(0);
});